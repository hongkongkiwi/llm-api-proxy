name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: anthropic-http-proxy
            package_name: anthropic-http-proxy-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            binary_name: anthropic-http-proxy.exe
            package_name: anthropic-http-proxy-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: anthropic-http-proxy
            package_name: anthropic-http-proxy-macos-x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: anthropic-http-proxy
            package_name: anthropic-http-proxy-linux-aarch64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: anthropic-http-proxy
            package_name: anthropic-http-proxy-macos-aarch64.tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create package (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.package_name }} ${{ matrix.binary_name }}
        cd -

    - name: Create package (Windows)
      if: runner.os == 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.package_name }} ${{ matrix.binary_name }}
        cd -

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.package_name }}
        path: ${{ matrix.package_name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max